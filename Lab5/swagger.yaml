swagger: "2.0"
info:
  description: "Thid id service for buying,booking tickets for different events"
  version: "1.0.1"
  title: "Booking Store"
  contact:
    email: "team@bookingstore.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "ticketstore.swagger.io"
basePath: "/"
tags:
- name: "Ticket"
  description: "Tickets for all events"
- name: "user"
  description: "Operations about user"
schemes:
- "https"
- "http"
paths:
  /Ticket:
    post:
      tags:
      - "Ticket"
      summary: "Add a new ticket to the store"
      description: ""
      operationId: "addTicket"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Ticket object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Ticket"
      responses:
        405:
          description: "Invalid input"
  /Ticket/{ticketId}:
    get:
      tags:
      - "Ticket"
      summary: "Find ticket by ID"
      description: "Returns a single ticket"
      operationId: "getTickedById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "path" 
        name: "ticketId"
        
        description: "ID of ticket to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Ticket"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Ticket not found"

 
  /store/inventory:
    get:
      tags:
      - "store"
      summary: "Returns tickets inventory"
      description: "Returns a map of status codes to quantities"
      operationId: "getInventory"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Ticket"


  /store/order/{orderId}:
    post:
      tags:
      - "store"
      summary: "Place an order for a ticked"
      description: ""
      operationId: "placeOrdering"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "path"
        name: "orderId"
        required: true
        type: "integer"
        format: "int128"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        400:
          description: "Ticket already ordered"
        404:
          description: "Not found ticket by id"
  
  /store/booking/{bookId}:
    post:
      tags:
      - "store"
      summary: "Place an booking for a ticked"
      description: ""
      operationId: "placeBookingById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "path"
        name: "bookId"
        required: true
        type: "integer"
        format: "int128"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Booking"
        400:
          description: "Already booked"
        404:
          description: "Not found booking by id"  
  
  /store/bookingCancel/{bookId}:
    delete:
      tags:
      - "store"
      summary: "Delete purchase booking by ID"
      description: "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors"
      operationId: "deleteOrder"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "bookId"
        in: "path"
        description: "ID of the order that needs to be deleted"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Booking not found"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        400:
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"

definitions:
  Ticket:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      nameOfEvent:
        type: "string"
      date:
        type: "string"
        format: "date-time"      
      ticketPrice:
        type: "integer"
        format: "int64"
      status:
        type: "string"
        description: "Ticket status in the store"
        enum:
        - "bought"
        - "booked"
        - "available"
  Booking:
    type: "object"
    properties:
       id:
        type: "integer"
        format: "int64"
       ticket:
        $ref: "#/definitions/Ticket"  
       complete:
        type: "boolean"
        default: false
    xml:
      name: "Book"
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      ticket:
        $ref: "#/definitions/Ticket"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  